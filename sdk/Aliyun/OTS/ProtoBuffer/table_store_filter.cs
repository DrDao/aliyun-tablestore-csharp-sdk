// This file was generated by a tool; you should avoid making direct changes.
// Consider using 'partial classes' to extend these types
// Input: my.proto

#pragma warning disable CS1591, CS0612, CS3021, IDE1006
namespace com.alicloud.openservices.tablestore.core.protocol
{

    [global::ProtoBuf.ProtoContract()]
    public partial class SingleColumnValueFilter : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"comparator", IsRequired = true)]
        public ComparatorType Comparator { get; set; } = ComparatorType.CtEqual;

        [global::ProtoBuf.ProtoMember(2, Name = @"column_name", IsRequired = true)]
        public string ColumnName { get; set; }

        [global::ProtoBuf.ProtoMember(3, Name = @"column_value", IsRequired = true)]
        public byte[] ColumnValue { get; set; }

        [global::ProtoBuf.ProtoMember(4, Name = @"filter_if_missing", IsRequired = true)]
        public bool FilterIfMissing { get; set; }

        [global::ProtoBuf.ProtoMember(5, Name = @"latest_version_only", IsRequired = true)]
        public bool LatestVersionOnly { get; set; }

    }

    [global::ProtoBuf.ProtoContract()]
    public partial class CompositeColumnValueFilter : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"combinator", IsRequired = true)]
        public LogicalOperator Combinator { get; set; } = LogicalOperator.LoNot;

        [global::ProtoBuf.ProtoMember(2, Name = @"sub_filters")]
        public global::System.Collections.Generic.List<Filter> SubFilters { get; } = new global::System.Collections.Generic.List<Filter>();

    }

    [global::ProtoBuf.ProtoContract()]
    public partial class ColumnPaginationFilter : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"offset", IsRequired = true)]
        public int Offset { get; set; }

        [global::ProtoBuf.ProtoMember(2, Name = @"limit", IsRequired = true)]
        public int Limit { get; set; }

    }

    [global::ProtoBuf.ProtoContract()]
    public partial class Filter : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"type", IsRequired = true)]
        public FilterType Type { get; set; } = FilterType.FtSingleColumnValue;

        [global::ProtoBuf.ProtoMember(2, IsRequired = true)]
        public byte[] filter { get; set; }

    }

    [global::ProtoBuf.ProtoContract()]
    public enum FilterType
    {
        [global::ProtoBuf.ProtoEnum(Name = @"FT_SINGLE_COLUMN_VALUE")]
        FtSingleColumnValue = 1,
        [global::ProtoBuf.ProtoEnum(Name = @"FT_COMPOSITE_COLUMN_VALUE")]
        FtCompositeColumnValue = 2,
        [global::ProtoBuf.ProtoEnum(Name = @"FT_COLUMN_PAGINATION")]
        FtColumnPagination = 3,
    }

    [global::ProtoBuf.ProtoContract()]
    public enum ComparatorType
    {
        [global::ProtoBuf.ProtoEnum(Name = @"CT_EQUAL")]
        CtEqual = 1,
        [global::ProtoBuf.ProtoEnum(Name = @"CT_NOT_EQUAL")]
        CtNotEqual = 2,
        [global::ProtoBuf.ProtoEnum(Name = @"CT_GREATER_THAN")]
        CtGreaterThan = 3,
        [global::ProtoBuf.ProtoEnum(Name = @"CT_GREATER_EQUAL")]
        CtGreaterEqual = 4,
        [global::ProtoBuf.ProtoEnum(Name = @"CT_LESS_THAN")]
        CtLessThan = 5,
        [global::ProtoBuf.ProtoEnum(Name = @"CT_LESS_EQUAL")]
        CtLessEqual = 6,
    }

    [global::ProtoBuf.ProtoContract()]
    public enum LogicalOperator
    {
        [global::ProtoBuf.ProtoEnum(Name = @"LO_NOT")]
        LoNot = 1,
        [global::ProtoBuf.ProtoEnum(Name = @"LO_AND")]
        LoAnd = 2,
        [global::ProtoBuf.ProtoEnum(Name = @"LO_OR")]
        LoOr = 3,
    }

}

#pragma warning restore CS1591, CS0612, CS3021, IDE1006
